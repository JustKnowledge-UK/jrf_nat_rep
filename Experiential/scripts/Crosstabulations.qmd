---
title: "Second Pass on Experiential Survey"
format: 
  html:
    self-contained: true
    page-layout: full
    embed-resources: true
    code-fold: true
    code-tools: true
    code-summary: "Code for Nerds"
    monobackgroundcolor: "black"
   # toc: true
editor: visual
author: Celestin Okoroji & Jolyon Miles-Wilson
engine: knitr
execute:
  warning: false
---

```{r}

#| echo: false
setwd("~/repos/JRF Nat Rep/Experiential")
#Load Data
##load libraries and data, create text vars to remove
library(tidyverse)
library(GWalkR)

#first run chisqared script and use the data output from that
data <- read_csv("data/2025-06-30 - clean_data_jrf_experiential.csv")

library(crosstable)
library(flextable)
library(scales)
library(officer)  # Load officer for fp_border

crosstable_options(scientific_log = 6)

# Define a text vars to remove
text_vars <- c("ID", "What_Do_You_Do_TEXT",
               "Job_Title_TEXT",
               "What_Does_Your_Employer_Do_TEXT",
               "TermsChanging_TEXT",
               "RightsViolations_TEXT",
               "Why_Job_TEXT",
               "Why_Outsourced_TEXT",
               "What_Improvements_Other_TEXT")

```

# Explore Data

Our main goal in this section is to understand **“what % of all respondents said yes to this question”.** Using the dashboard below you can do this in a self-guided manner, you can also switch the 'data' tab in the interface to explore individual variables.

Select variables and add them to the X and Y axes.

> If you select two categorical (blue) variables you need to add the 'row counts' (purple) variable to one of the axes

In addition to this, we have provided low pay crosstabulations for all the variables. We can provide any other cross-tabulations you would like.

```{r}
#| echo: false
gwalkr(data)

```

# Crosstabulations

Next we produce cross tabulations for every variable in the clean dataset (except text responses) and low pay (defined as 4/5th ASHE).

Where variables are numeric e.g. likert scales, higher values = better/more positive.\
\
These tables are extremely verbose but the Low Pay crosstab is very informative so we have included it in full here.

We have also produced crosstabs for the following variables:

-   Outsourcing Group

-   Ethnicity

-   Race (Collapsed Ethnicity)

-   BORNUK (whether the person was born in the UK)

-   Sex

-   Region

-   Occupation_Category

-   Organisation_Category

The crosstabulations are very long. It would be useful to further reduce the number of variables just to those which are of interest to the final write up. e.g. \< 20 variables *plus* demographics or however many you think can be reasonably discussed in the report.

## By Low Pay {collapse="true"}

```{r, collapse = T}
# Create the crosstable and convert it to flextable
Income_Crosstab<- crosstable(data %>% 
                select(-any_of(text_vars)), 
                by = income_group,
                total = "both",
                showNA = "no", 
                funs=c(median, mean, "std dev"=sd),
                percent_digits = 2, 
                percent_pattern = "{n} ({p_col})"
) %>%
  as_flextable()

# Retrieve the column keys from the flextable object
col_keys <- Income_Crosstab$col_keys

# Identify numeric columns in the original data and map to flextable column keys
numeric_columns <- names(data)[sapply(data, is.numeric)]
numeric_flextable_columns <- intersect(col_keys, numeric_columns)

# Calculate the actual domain (min and max) of the numeric columns
numeric_data <- unlist(data[numeric_columns])
min_val <- min(numeric_data, na.rm = TRUE)
max_val <- max(numeric_data, na.rm = TRUE)

# Apply basic styling
Income_Crosstab<- Income_Crosstab%>%
  # Autofit column widths
  autofit() %>%
  
  # Align numeric columns (right-align numeric columns)
  align(j = numeric_flextable_columns, align = "right", part = "body") %>%
  
  # Add background color to the header
  bg(bg = "#4F81BD", part = "header") %>%
  color(color = "white", part = "header") %>%
  
  # Bold the header
  bold(part = "header") %>%
  
  # Add borders around the table using officer's fp_border function
  border_outer(border = officer::fp_border(color = "black", width = 1)) %>%
  border_inner_h(border = officer::fp_border(color = "gray", width = 0.5)) %>%
  border_inner_v(border = officer::fp_border(color = "gray", width = 0.5)) %>%
  
  # Apply dynamic background color to numeric cells based on their actual min/max range
  bg(j = numeric_flextable_columns, 
     bg = scales::col_numeric(palette = "viridis", domain = c(min_val, max_val))(numeric_data), 
     part = "body") %>%
  # Align the text to the center for non-numeric (categorical) variables
  align(j = setdiff(col_keys, numeric_flextable_columns), align = "center", part = "body") %>%
  
  # Set font size and type for the whole table
  fontsize(size = 10, part = "all") %>%
  font(fontname = "Arial", part = "all")

# Display the styled flextable
Income_Crosstab


```

## By Ethnicity

```{r}
# Create the crosstable and convert it to flextable
Ethnicity_Crosstab<- crosstable(data %>% 
                                  select(-any_of(text_vars)), 
                                by = Ethnicity, 
                total = "both",
                showNA = "no", 
                funs=c(median, mean, "std dev"=sd),
                percent_digits = 2, 
                percent_pattern = "{n} ({p_col})"
) %>%
  as_flextable()

# Retrieve the column keys from the flextable object
col_keys <- Ethnicity_Crosstab$col_keys

# Identify numeric columns in the original data and map to flextable column keys
numeric_columns <- names(data)[sapply(data, is.numeric)]
numeric_flextable_columns <- intersect(col_keys, numeric_columns)

# Calculate the actual domain (min and max) of the numeric columns
numeric_data <- unlist(data[numeric_columns])
min_val <- min(numeric_data, na.rm = TRUE)
max_val <- max(numeric_data, na.rm = TRUE)

# Apply basic styling
Ethnicity_Crosstab<- Ethnicity_Crosstab%>%
  # Autofit column widths
  autofit() %>%
  
  # Align numeric columns (right-align numeric columns)
  align(j = numeric_flextable_columns, align = "right", part = "body") %>%
  
  # Add background color to the header
  bg(bg = "#4F81BD", part = "header") %>%
  color(color = "white", part = "header") %>%
  
  # Bold the header
  bold(part = "header") %>%
  
  # Add borders around the table using officer's fp_border function
  border_outer(border = officer::fp_border(color = "black", width = 1)) %>%
  border_inner_h(border = officer::fp_border(color = "gray", width = 0.5)) %>%
  border_inner_v(border = officer::fp_border(color = "gray", width = 0.5)) %>%
  
  # Apply dynamic background color to numeric cells based on their actual min/max range
  bg(j = numeric_flextable_columns, 
     bg = scales::col_numeric(palette = "viridis", domain = c(min_val, max_val))(numeric_data), 
     part = "body") %>%
  # Align the text to the center for non-numeric (categorical) variables
  align(j = setdiff(col_keys, numeric_flextable_columns), align = "center", part = "body") %>%
  
  # Set font size and type for the whole table
  fontsize(size = 10, part = "all") %>%
  font(fontname = "Arial", part = "all")

# Display the styled flextable
Ethnicity_Crosstab

```

## By Race

```{r}
# Create the crosstable and convert it to flextable
Race_Crosstab<- crosstable(data %>% 
                             select(-any_of(text_vars)), 
                           by = Ethnicity_Collapsed, 
                total = "both",
                showNA = "no", 
                funs=c(median, mean, "std dev"=sd),
                percent_digits = 2, 
                percent_pattern = "{n} ({p_col})"
) %>%
  as_flextable()

# Retrieve the column keys from the flextable object
col_keys <- Race_Crosstab$col_keys

# Identify numeric columns in the original data and map to flextable column keys
numeric_columns <- names(data)[sapply(data, is.numeric)]
numeric_flextable_columns <- intersect(col_keys, numeric_columns)

# Calculate the actual domain (min and max) of the numeric columns
numeric_data <- unlist(data[numeric_columns])
min_val <- min(numeric_data, na.rm = TRUE)
max_val <- max(numeric_data, na.rm = TRUE)

# Apply basic styling
Race_Crosstab<- Race_Crosstab%>%
  # Autofit column widths
  autofit() %>%
  
  # Align numeric columns (right-align numeric columns)
  align(j = numeric_flextable_columns, align = "right", part = "body") %>%
  
  # Add background color to the header
  bg(bg = "#4F81BD", part = "header") %>%
  color(color = "white", part = "header") %>%
  
  # Bold the header
  bold(part = "header") %>%
  
  # Add borders around the table using officer's fp_border function
  border_outer(border = officer::fp_border(color = "black", width = 1)) %>%
  border_inner_h(border = officer::fp_border(color = "gray", width = 0.5)) %>%
  border_inner_v(border = officer::fp_border(color = "gray", width = 0.5)) %>%
  
  # Apply dynamic background color to numeric cells based on their actual min/max range
  bg(j = numeric_flextable_columns, 
     bg = scales::col_numeric(palette = "viridis", domain = c(min_val, max_val))(numeric_data), 
     part = "body") %>%
  # Align the text to the center for non-numeric (categorical) variables
  align(j = setdiff(col_keys, numeric_flextable_columns), align = "center", part = "body") %>%
  
  # Set font size and type for the whole table
  fontsize(size = 10, part = "all") %>%
  font(fontname = "Arial", part = "all")

# Display the styled flextable
Race_Crosstab

```

## By Born_UK

```{r}
# Create the crosstable and convert it to flextable
BORNUK_Crosstab<- crosstable(data %>% 
                               select(-any_of(text_vars)), 
                             by = BORNUK, 
                total = "both",
                showNA = "no", 
                funs=c(median, mean, "std dev"=sd),
                percent_digits = 2, 
                percent_pattern = "{n} ({p_col})"
) %>%
  as_flextable()

# Retrieve the column keys from the flextable object
col_keys <- BORNUK_Crosstab$col_keys

# Identify numeric columns in the original data and map to flextable column keys
numeric_columns <- names(data)[sapply(data, is.numeric)]
numeric_flextable_columns <- intersect(col_keys, numeric_columns)

# Calculate the actual domain (min and max) of the numeric columns
numeric_data <- unlist(data[numeric_columns])
min_val <- min(numeric_data, na.rm = TRUE)
max_val <- max(numeric_data, na.rm = TRUE)

# Apply basic styling
BORNUK_Crosstab<- BORNUK_Crosstab%>%
  # Autofit column widths
  autofit() %>%
  
  # Align numeric columns (right-align numeric columns)
  align(j = numeric_flextable_columns, align = "right", part = "body") %>%
  
  # Add background color to the header
  bg(bg = "#4F81BD", part = "header") %>%
  color(color = "white", part = "header") %>%
  
  # Bold the header
  bold(part = "header") %>%
  
  # Add borders around the table using officer's fp_border function
  border_outer(border = officer::fp_border(color = "black", width = 1)) %>%
  border_inner_h(border = officer::fp_border(color = "gray", width = 0.5)) %>%
  border_inner_v(border = officer::fp_border(color = "gray", width = 0.5)) %>%
  
  # Apply dynamic background color to numeric cells based on their actual min/max range
  bg(j = numeric_flextable_columns, 
     bg = scales::col_numeric(palette = "viridis", domain = c(min_val, max_val))(numeric_data), 
     part = "body") %>%
  # Align the text to the center for non-numeric (categorical) variables
  align(j = setdiff(col_keys, numeric_flextable_columns), align = "center", part = "body") %>%
  
  # Set font size and type for the whole table
  fontsize(size = 10, part = "all") %>%
  font(fontname = "Arial", part = "all")

# Display the styled flextable
BORNUK_Crosstab
```

## By Sex

```{r}
# Create the crosstable and convert it to flextable
Sex_Crosstab<- crosstable(data %>% 
                            select(-any_of(text_vars)), 
                          by = Sex, 
                total = "both",
                showNA = "no", 
                funs=c(median, mean, "std dev"=sd),
                percent_digits = 2, 
                percent_pattern = "{n} ({p_col})"
) %>%
  as_flextable()

# Retrieve the column keys from the flextable object
col_keys <- Sex_Crosstab$col_keys

# Identify numeric columns in the original data and map to flextable column keys
numeric_columns <- names(data)[sapply(data, is.numeric)]
numeric_flextable_columns <- intersect(col_keys, numeric_columns)

# Calculate the actual domain (min and max) of the numeric columns
numeric_data <- unlist(data[numeric_columns])
min_val <- min(numeric_data, na.rm = TRUE)
max_val <- max(numeric_data, na.rm = TRUE)

# Apply basic styling
Sex_Crosstab<- Sex_Crosstab%>%
  # Autofit column widths
  autofit() %>%
  
  # Align numeric columns (right-align numeric columns)
  align(j = numeric_flextable_columns, align = "right", part = "body") %>%
  
  # Add background color to the header
  bg(bg = "#4F81BD", part = "header") %>%
  color(color = "white", part = "header") %>%
  
  # Bold the header
  bold(part = "header") %>%
  
  # Add borders around the table using officer's fp_border function
  border_outer(border = officer::fp_border(color = "black", width = 1)) %>%
  border_inner_h(border = officer::fp_border(color = "gray", width = 0.5)) %>%
  border_inner_v(border = officer::fp_border(color = "gray", width = 0.5)) %>%
  
  # Apply dynamic background color to numeric cells based on their actual min/max range
  bg(j = numeric_flextable_columns, 
     bg = scales::col_numeric(palette = "viridis", domain = c(min_val, max_val))(numeric_data), 
     part = "body") %>%
  # Align the text to the center for non-numeric (categorical) variables
  align(j = setdiff(col_keys, numeric_flextable_columns), align = "center", part = "body") %>%
  
  # Set font size and type for the whole table
  fontsize(size = 10, part = "all") %>%
  font(fontname = "Arial", part = "all")

# Display the styled flextable
Sex_Crosstab

```

## By Region

```{r}
# Create the crosstable and convert it to flextable
Region_Crosstab<- crosstable(data %>% 
                               select(-any_of(text_vars)), 
                             by = Region, 
                total = "both",
                showNA = "no", 
                funs=c(median, mean, "std dev"=sd),
                percent_digits = 2, 
                percent_pattern = "{n} ({p_col})"
) %>%
  as_flextable()

# Retrieve the column keys from the flextable object
col_keys <- Region_Crosstab$col_keys

# Identify numeric columns in the original data and map to flextable column keys
numeric_columns <- names(data)[sapply(data, is.numeric)]
numeric_flextable_columns <- intersect(col_keys, numeric_columns)

# Calculate the actual domain (min and max) of the numeric columns
numeric_data <- unlist(data[numeric_columns])
min_val <- min(numeric_data, na.rm = TRUE)
max_val <- max(numeric_data, na.rm = TRUE)

# Apply basic styling
Region_Crosstab<- Region_Crosstab%>%
  # Autofit column widths
  autofit() %>%
  
  # Align numeric columns (right-align numeric columns)
  align(j = numeric_flextable_columns, align = "right", part = "body") %>%
  
  # Add background color to the header
  bg(bg = "#4F81BD", part = "header") %>%
  color(color = "white", part = "header") %>%
  
  # Bold the header
  bold(part = "header") %>%
  
  # Add borders around the table using officer's fp_border function
  border_outer(border = officer::fp_border(color = "black", width = 1)) %>%
  border_inner_h(border = officer::fp_border(color = "gray", width = 0.5)) %>%
  border_inner_v(border = officer::fp_border(color = "gray", width = 0.5)) %>%
  
  # Apply dynamic background color to numeric cells based on their actual min/max range
  bg(j = numeric_flextable_columns, 
     bg = scales::col_numeric(palette = "viridis", domain = c(min_val, max_val))(numeric_data), 
     part = "body") %>%
  # Align the text to the center for non-numeric (categorical) variables
  align(j = setdiff(col_keys, numeric_flextable_columns), align = "center", part = "body") %>%
  
  # Set font size and type for the whole table
  fontsize(size = 10, part = "all") %>%
  font(fontname = "Arial", part = "all")

# Display the styled flextable
Region_Crosstab
```

## By Occupation Category

```{r}
# Create the crosstable and convert it to flextable
Occupation_Crosstab<- crosstable(data %>% 
                                   select(-any_of(text_vars)), 
                                 by = Occupation_Catergory, 
                total = "both",
                showNA = "no", 
                funs=c(median, mean, "std dev"=sd),
                percent_digits = 2, 
                percent_pattern = "{n} ({p_col})"
) %>%
  as_flextable()

# Retrieve the column keys from the flextable object
col_keys <- Occupation_Crosstab$col_keys

# Identify numeric columns in the original data and map to flextable column keys
numeric_columns <- names(data)[sapply(data, is.numeric)]
numeric_flextable_columns <- intersect(col_keys, numeric_columns)

# Calculate the actual domain (min and max) of the numeric columns
numeric_data <- unlist(data[numeric_columns])
min_val <- min(numeric_data, na.rm = TRUE)
max_val <- max(numeric_data, na.rm = TRUE)

# Apply basic styling
Occupation_Crosstab<- Occupation_Crosstab%>%
  # Autofit column widths
  autofit() %>%
  
  # Align numeric columns (right-align numeric columns)
  align(j = numeric_flextable_columns, align = "right", part = "body") %>%
  
  # Add background color to the header
  bg(bg = "#4F81BD", part = "header") %>%
  color(color = "white", part = "header") %>%
  
  # Bold the header
  bold(part = "header") %>%
  
  # Add borders around the table using officer's fp_border function
  border_outer(border = officer::fp_border(color = "black", width = 1)) %>%
  border_inner_h(border = officer::fp_border(color = "gray", width = 0.5)) %>%
  border_inner_v(border = officer::fp_border(color = "gray", width = 0.5)) %>%
  
  # Apply dynamic background color to numeric cells based on their actual min/max range
  bg(j = numeric_flextable_columns, 
     bg = scales::col_numeric(palette = "viridis", domain = c(min_val, max_val))(numeric_data), 
     part = "body") %>%
  # Align the text to the center for non-numeric (categorical) variables
  align(j = setdiff(col_keys, numeric_flextable_columns), align = "center", part = "body") %>%
  
  # Set font size and type for the whole table
  fontsize(size = 10, part = "all") %>%
  font(fontname = "Arial", part = "all")

# Display the styled flextable
Occupation_Crosstab
```

## By Organisational Category

```{r}
# Create the crosstable and convert it to flextable
Organisational_Crosstab<- crosstable(data %>% 
                                       select(-any_of(text_vars)), 
                                     by = Organisation_Catergory, 
                total = "both",
                showNA = "no", 
                funs=c(median, mean, "std dev"=sd),
                percent_digits = 2, 
                percent_pattern = "{n} ({p_col})"
) %>%
  as_flextable()

# Retrieve the column keys from the flextable object
col_keys <- Organisational_Crosstab$col_keys

# Identify numeric columns in the original data and map to flextable column keys
numeric_columns <- names(data)[sapply(data, is.numeric)]
numeric_flextable_columns <- intersect(col_keys, numeric_columns)

# Calculate the actual domain (min and max) of the numeric columns
numeric_data <- unlist(data[numeric_columns])
min_val <- min(numeric_data, na.rm = TRUE)
max_val <- max(numeric_data, na.rm = TRUE)

# Apply basic styling
Organisational_Crosstab<- Organisational_Crosstab%>%
  # Autofit column widths
  autofit() %>%
  
  # Align numeric columns (right-align numeric columns)
  align(j = numeric_flextable_columns, align = "right", part = "body") %>%
  
  # Add background color to the header
  bg(bg = "#4F81BD", part = "header") %>%
  color(color = "white", part = "header") %>%
  
  # Bold the header
  bold(part = "header") %>%
  
  # Add borders around the table using officer's fp_border function
  border_outer(border = officer::fp_border(color = "black", width = 1)) %>%
  border_inner_h(border = officer::fp_border(color = "gray", width = 0.5)) %>%
  border_inner_v(border = officer::fp_border(color = "gray", width = 0.5)) %>%
  
  # Apply dynamic background color to numeric cells based on their actual min/max range
  bg(j = numeric_flextable_columns, 
     bg = scales::col_numeric(palette = "viridis", domain = c(min_val, max_val))(numeric_data), 
     part = "body") %>%
  # Align the text to the center for non-numeric (categorical) variables
  align(j = setdiff(col_keys, numeric_flextable_columns), align = "center", part = "body") %>%
  
  # Set font size and type for the whole table
  fontsize(size = 10, part = "all") %>%
  font(fontname = "Arial", part = "all")

# Display the styled flextable
Organisational_Crosstab
```

# 
