---
title: "Untitled"
format: html
editor: visual
---

```{r}
rm(list = ls())
library(haven)
library(poLCA)
library(dplyr)
library(ggplot2)
library(tidyr)
library(skimr)
library(kableExtra)
library(MASS)
library(wesanderson)
library(survey)
```

```{r}

colours <- wes_palette("GrandBudapest2",4,"discrete")
many_colours <- c('#a6cee3','#1f78b4','#b2df8a','#33a02c','#fb9a99','#e31a1c','#fdbf6f','#ff7f00','#cab2d6','#6a3d9a','#ffff99','#b15928','#8dd3c7','#ffffb3','#bebada','#fb8072','#80b1d3','#fdb462','#b3de69','#fccde5','#d9d9d9','#bc80bd','#ccebc5','#ffed6f')
```

```{r}

data <- read_sav("../Data/uncleaned_full_data.sav")

# add new industry data
# for now just combine the relevant variables
data_2 <- read_sav("../Data/JRF Outsourced Workers - Occupations and Sectors.sav")
# skim(data_2)


data_occupations <- data_2[,c("MIProRspId","unit_code","UnitOccupation","smg_code","MajorsubgroupOccupation",
                        "major_code","Majorgroupcode","SectorCode","SectorName")]

data <- left_join(data, data_occupations, by = c("ID" = "MIProRspId"))

# calculate indicator data
# invert response function for summing
invert_response <- function(x){
  x <- 2 + (-1*x)
}

# Now for just indicators
indicator_data <- data %>% 
  select(ID, starts_with("Q1")) %>%
  reframe(across(starts_with("Q1"), ~invert_response(.x)), .by = ID) %>%
  rowwise() %>%
  mutate(
    sum_true = sum(Q1_1, Q1_2, Q1_3, Q1_4, Q1_5, Q1_6)
  ) %>% 
  select(-starts_with("Q1"))

# Check ID the same
paste("IDs match: ", sum(data$ID == indicator_data$ID) == nrow(data))

# Merge into main data set
data <- left_join(data, indicator_data, by = "ID")



#------------------------#
#### Assign to groups ####
#------------------------#
# As of 17 February, the definitions are:
# 
# -   **Outsourced**, defined as responding 'I am sure I am outsourced' or 'I might be outsourced', and responding 'I do work on a long-term basis'.
# -   **Likely agency**, defined as those responding 'I am sure I am agency' and 'I do work on a long-term basis', **excluding** those people who are already defined as being outsourced.
# -   **High indicators**: defined as responding TRUE to 5 or 6 of the outsourcing indicators, as well as responding 'I do work on a long-term basis', **excluding** those people who are already defined as outsourced or likely agency.

data <- data %>%
  mutate(
    # SURE outsourced or MIGHT BE outsourced + LONGTERM
    outsourced = ifelse((Q3v3a == 1 & Q2 == 1) | (Q3v3a == 2 & Q2 == 1), 1, 0),
    # NOT outsourced, SURE agency, and LONG-TERM
    likely_agency = ifelse(outsourced == 0 & Q2 == 1 & (Q3v3b == 1 | Q3v3c == 1 | Q3v3d == 1), 1, 0),
    likely_agency = ifelse(is.na(likely_agency), 0, likely_agency),
    # NOT outsourced, NOT likely agency, 5 or more indicators, & LONGTERM
    high_indicators = ifelse(outsourced == 0 & likely_agency == 0 & (Q2 == 1 & sum_true >= 5), 1, 0)
  )

# count the groupings
print("Totals: 1=Outsourced, 2=Likely agency, 3=High indicators")
lapply(list(data$outsourced,
            data$likely_agency,
            data$high_indicators), sum)

# Flatten these groupings into a single variable

data <- data %>%
  mutate(
    outsourcing_group = factor(case_when(outsourced == 1 ~ 'outsourced',
                                         likely_agency == 1 ~ 'likely_agency',
                                         high_indicators == 1 ~ 'high_indicators',
                                         TRUE ~ 'not_outsourced'), 
                               levels = c("not_outsourced",
                                          "outsourced",
                                          "likely_agency",
                                          "high_indicators")
    ),
    outsourcing_status = factor(case_when(outsourced == 1 | likely_agency == 1 | high_indicators == 1 ~ 'Outsourced',
                                         TRUE ~ 'Not outsourced'),
                                levels = c('Not outsourced',
                                           'Outsourced')
    )
  )

data <- data %>%
  # get values of labels
  # mutate_all(haven::as_factor) %>%
  mutate(
    # make all annual incomes. Note this assumes 52 working weeks!
    income_annual = case_when(INCOME_FREQ == 1 ~ INCOME_OPEN_1,
                              INCOME_FREQ == 2 ~ INCOME_OPEN_1*12,
                              INCOME_FREQ == 3 ~ INCOME_OPEN_1*52,
                              INCOME_FREQ == 4 ~ INCOME_OPEN_1*HOURS*52,
                              TRUE ~ NA),
    income_percentile = ntile(income_annual, 100)
  )
options(scipen = 999)

data_labelled <- haven::as_factor(data)

```

```{r}
ggplot(data, aes(x = NatRepemployees)) +
  geom_histogram()
```

```{r}
unique(data$NatRepemployees)
```

```{r}
design <- svydesign(ids=~1, weights = ~NatRepemployees, data = data)
summary(design)
```

```{r}
data_labelled$Age <- as.numeric(as.character(data_labelled$Age))
design <- svydesign(ids=~1, weights = ~NatRepemployees, data = data_labelled)
mean_age <- svymean(~Age, design, na.rm=T)
print(mean_age)
```

```{r}
mean(data_labelled$Age, na.rm=T)
```

```{r}
test <- as.data.frame(tapply(data$NatRepemployees, data_labelled$Ethnicity, sum))

test_2 <- data_labelled %>%
  group_by(Ethnicity) %>%
  summarise(
    n = n()
  )
```

# Ethnicity test

```{r}
ethnicity_statistics <- data %>%
  # get values of labels
  # mutate(
  #   Ethnicity = haven::as_factor(Ethnicity)
  # ) %>%
  group_by(outsourcing_status, Ethnicity) %>%
  summarise(
    Frequency = n(),
    weighted_freq = sum(NatRepemployees)
  ) %>%
  mutate(
    Sum = sum(Frequency),
    weighted_sum = sum(weighted_freq),
    Percentage = 100 * (Frequency / Sum),
    weighted_perc = 100 * (weighted_freq / weighted_sum)
    
  ) %>%
  rename(
    `Outsourcing group` = outsourcing_status
  )
```

```{r}

ethnicity_statistics %>%
  ggplot(., aes(Ethnicity, Percentage, fill = `Outsourcing group`)) +
  geom_col(colour="black") +
  # annotate("text", x = ethnicity_statistics$Ethnicity, y = 75, label = paste0("n=", ethnicity_statistics$Sum)) +
  coord_flip() +
  scale_fill_manual(values=many_colours, name = "Ethnicity")
```

```{r}
ethnicity_statistics %>%
  ggplot(., aes(Ethnicity, weighted_perc, fill = `Outsourcing group`)) +
  geom_col(colour="black") +
  # annotate("text", x = ethnicity_statistics$Ethnicity, y = 75, label = paste0("n=", ethnicity_statistics$weighted_sum)) +
  coord_flip() +
  scale_fill_manual(values=many_colours, name = "Ethnicity")
```

```{r}
ethnicity_statistics %>%
  ggplot(., aes(`Outsourcing group`, Percentage, fill = as.factor(Ethnicity))) +
  geom_col(colour="black") +
  # annotate("text", x = ethnicity_statistics$outsourcing_status, y = 75, label = paste0("n=",ethnicity_statistics$Sum)) +
  coord_flip() +
  scale_fill_manual(values = many_colours, name = "Ethnicity") +
  xlab("Outsourcing group") +
  theme_minimal()
```

```{r}
ethnicity_statistics %>%
  ggplot(., aes(`Outsourcing group`, weighted_perc, fill = as.factor(Ethnicity))) +
  geom_col(colour="black") +
  # annotate("text", x = ethnicity_statistics$outsourcing_status, y = 75, label = paste0("n=",ethnicity_statistics$Sum)) +
  coord_flip() +
  scale_fill_manual(values = many_colours, name = "Ethnicity") +
  xlab("Outsourcing group") +
  theme_minimal()
```

# Sector

Relevant occupation variables

-   UnitOccupation

-   MajorSubgroupOccupation

-   Majorgroupcode

-   SectorName

```{r}
length(unique(data$UnitOccupation)) 
length(unique(data$MajorsubgroupOccupation)) 
length(unique(data$Majorgroupcode)) 
length(unique(data$SectorName)) 

```

```{r}
unique(data$Majorgroupcode)
```

```{r}
sector_summary <- data %>%

  group_by(outsourcing_status,Majorgroupcode) %>%
  summarise(
    Frequency = sum(NatRepemployees),
    avg_income = mean(income_annual, na.rm=T),
    wtd_avg_income = weighted.mean(income_annual, w = NatRepemployees, na.rm=T)
  ) %>% 
  mutate(
    Sum = sum(Frequency),
    perc = 100 * (Frequency/Sum)
  )

```

```{r}
sector_summary %>%
  ggplot(aes(outsourcing_status, perc, fill = as.factor(Majorgroupcode))) +
  geom_col() +
  coord_flip() +
  scale_fill_manual(values=many_colours)

# sector_summary %>%
#   mutate(
#     Majorgroupcode_labelled = haven::as_factor(Majorgroupcode)
#   ) %>%
#   kable() %>%
#   kable_styling(full_width = F)
#   
```

Outsrouced people are less likely to be working in professional or associate professional occupations, and more likely to be working in elementary occupations

## Deep dive into elementary occs

```{r}
occs_subset <- data %>%
  filter(Majorgroupcode %in% c(2,8,4)) %>%
  select(Majorgroupcode, UnitOccupation) %>%
  mutate_all(haven::as_factor) %>%
  distinct() %>%
  arrange(.,Majorgroupcode)
```

think about trying to express the chart above on occupations as average incomes

## Bubble chart

```{r}
sector_summary <- data %>%

  group_by(Majorgroupcode,outsourcing_status) %>%
  summarise(
    Frequency = sum(NatRepemployees),
    avg_income = mean(income_annual, na.rm=T),
    wtd_avg_income = weighted.mean(income_annual, w = NatRepemployees, na.rm=T)
  ) %>% 
  mutate(
    Sum = sum(Frequency),
    perc = 100 * (Frequency/Sum)
  ) %>% 
  drop_na()

sector_summary %>%
  mutate(
    Majorgroupcode = haven::as_factor(Majorgroupcode)
  ) %>%
  ggplot(., aes(Majorgroupcode, wtd_avg_income, size = perc, colour = outsourcing_status)) +
    geom_point(position = "dodge") + 
    coord_flip() +
  theme_minimal() +
  theme(legend.position = "bottom") +
  # scale_x_continuous(breaks=scales::pretty(10))
  scale_colour_manual(values=colours)
```

why is there an extra NA for Majorgroupcode? the variable has an NA category (6), but an NA category emerges in the first step of processign (as a result of the processing itself?)

```{r}
test <- data %>%
  group_by(Majorgroupcode) %>%
  summarise(
    n = n()
  )
```

It's just one case, so maybe we can just drop it for this analysis
