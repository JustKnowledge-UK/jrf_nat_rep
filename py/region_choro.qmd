---
title: "Outsourced workers by region"
format: html
---

```{python}
import pandas as pd
import os
import glob
import geopandas as gpd
import matplotlib as mpl 
from matplotlib.colors import ListedColormap, LinearSegmentedColormap
import matplotlib.pyplot as plt
import requests
import janitor
```

```{python}
cmap = mpl.colormaps['viridis']
```

```{python}
# regional data
file = os.path.join('..', 'outputs','data','region_stats_2.csv')
data = pd.read_csv(file)

data = data[data['Outsourcing status']=="Outsourced"]
data.loc[data['Region']=='Yorkshire and the Humber','Region'] = 'Yorkshire and The Humber'

```


```{python}
# regions
base_url = 'https://services1.arcgis.com/ESMARspQHYMw9BZ9/ArcGIS/rest/services/Regions_December_2023_Boundaries_EN_BGC/FeatureServer/0/query'

# Parameters
params = {
    "where": "1=1",  # Retrieve all records
    "outFields": "*",  # "*" specifies all fields
    "outSR": "4326",
    "f": "geojson",
    "resultOffset": 0,  # For pagination
    "resultRecordCount": 2000
}

# Send request
response = requests.get(base_url, params=params)

# Read the response content as geopandas df
region_boundaries = gpd.read_file(response.content)

base_url = 'https://services1.arcgis.com/ESMARspQHYMw9BZ9/ArcGIS/rest/services/Countries_December_2023_Boundaries_UK_BGC/FeatureServer/0/query'

# Send request
response = requests.get(base_url, params=params)

# Read the response content as geopandas df
country_boundaries = gpd.read_file(response.content)

# Combine regions and countries to incorporate wales
country_boundaries_altered = country_boundaries.drop('CTRY23NMW',axis=1) # drop welsh name column
country_boundaries_altered.rename(columns={'CTRY23CD': 'RGN23CD', 'CTRY23NM': 'RGN23NM'}, inplace=True) # rename columns to make consistent
regions_filled = pd.concat([region_boundaries, country_boundaries_altered]) # combine the two dfs
regions_filled = regions_filled[regions_filled.RGN23NM != "England"] # drop England so that we don't double plot it

# Tidy column names
regions_filled = janitor.clean_names(regions_filled)
```

```{python}
# merge data to plot
data_gpd = regions_filled.merge(data, how='left', left_on='rgn23nm', right_on='Region')
```

# Proportion of workers who are outsourced in each region

```{python}
fig, ax = plt.subplots(figsize=[12,12])

data_gpd.plot(ax=ax, column='Percentage', legend=True, cmap=cmap,legend_kwds={'label': "Percentage of region's entire workforce"})
ax.set_title('Proportion of outsourced workers by region')
ax.set_axis_off()

fig.savefig('../outputs/figures/outsourcing_by_region.svg', format='svg')
fig.savefig('../outputs/figures/outsourcing_by_region.png', format='png')
```

## Same again but with London removed

```{python}
subset_gpd = data_gpd[data_gpd['Region'] != 'London']

fig, ax = plt.subplots(figsize=[12,12])

subset_gpd.plot(ax=ax, column='Percentage', legend=True, cmap=cmap,legend_kwds={'label': "Percentage of region's entire workforce"})
ax.set_title('Proportion of outsourced workers by region, excl. London')
ax.set_axis_off()

fig.savefig('../outputs/figures/outsourcing_by_region_excl_london.svg', format='svg')
fig.savefig('../outputs/figures/outsourcing_by_region_excl_london.png', format='png')
```

# Distribution of outsourced workers across the UK

```{python}
# distribution data
file = os.path.join('..', 'outputs','data','region_stats_3.csv')
data = pd.read_csv(file)

data.loc[data['Region']=='Yorkshire and the Humber','Region'] = 'Yorkshire and The Humber'

data_gpd = regions_filled.merge(data, how='left', left_on='rgn23nm', right_on='Region')
```


```{python}
fig, ax = plt.subplots(figsize=[12,12])

data_gpd.plot(ax=ax, column='Percentage', legend=True, cmap=cmap,legend_kwds={'label': "Percentage of UK outsourced workers"})
ax.set_title('Distribution of outsourced workers across the UK')
ax.set_axis_off()

fig.savefig('../outputs/figures/outsourcing_distribution_across_regions.svg', format='svg')
fig.savefig('../outputs/figures/outsourcing_distribution_across_regions.png', format='png')
```